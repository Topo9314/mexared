# Generated by Django 5.2.1 on 2025-06-22 19:11

import django.core.validators
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activacion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único de la activación.', primary_key=True, serialize=False, verbose_name='ID')),
                ('cliente_nombre', models.CharField(help_text='Nombre completo del cliente final.', max_length=150, verbose_name='Nombre del Cliente')),
                ('cliente_email', models.EmailField(blank=True, help_text='Correo electrónico del cliente final, opcional.', max_length=254, null=True, verbose_name='Email del Cliente')),
                ('telefono_contacto', models.CharField(help_text='Número de contacto del cliente.', max_length=20, validators=[django.core.validators.RegexValidator(message='El número debe tener 10-15 dígitos, opcionalmente con +.', regex='^\\+?\\d{10,15}$')], verbose_name='Teléfono de Contacto')),
                ('iccid', models.CharField(db_index=True, help_text='Identificador único de la SIM.', max_length=22, unique=True, validators=[django.core.validators.RegexValidator(message='El ICCID debe tener 19-22 dígitos.', regex='^\\d{19,22}$')], verbose_name='ICCID')),
                ('proveedor', models.CharField(blank=True, help_text='Proveedor de la SIM (e.g., Addinteli).', max_length=50, null=True, verbose_name='Proveedor')),
                ('tipo_producto', models.CharField(choices=[('SIM', 'SIM Card'), ('MIFI', 'Dispositivo MiFi'), ('ESIM', 'eSIM'), ('HBB', 'Internet en el Hogar'), ('IOT', 'IoT')], help_text='Tipo de producto asociado (SIM, MiFi, eSIM, etc.).', max_length=30, verbose_name='Tipo de Producto')),
                ('tipo_activacion', models.CharField(choices=[('nueva', 'Nueva Línea'), ('portabilidad', 'Portabilidad'), ('especifica', 'Producto Específico')], help_text='Tipo de activación: nueva línea, portabilidad o producto específico.', max_length=30, verbose_name='Tipo de Activación')),
                ('numero_asignado', models.CharField(blank=True, db_index=True, help_text='Número telefónico asignado por Addinteli.', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='El número debe tener 10-15 dígitos, opcionalmente con +.', regex='^\\+?\\d{10,15}$')], verbose_name='Número Asignado')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('en_proceso', 'En Proceso'), ('exitosa', 'Exitosa'), ('fallida', 'Fallida'), ('revertida', 'Revertida')], default='pendiente', help_text='Estado actual de la activación.', max_length=20, verbose_name='Estado')),
                ('respuesta_addinteli', models.JSONField(blank=True, help_text='Respuesta cruda de la API de Addinteli para auditoría.', null=True, verbose_name='Respuesta de Addinteli')),
                ('precio_costo', models.DecimalField(decimal_places=2, help_text='Costo base para el usuario que realiza la activación.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Precio Costo')),
                ('precio_final', models.DecimalField(decimal_places=2, help_text='Precio de venta al cliente final.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Precio Final')),
                ('codigo_addinteli', models.CharField(blank=True, db_index=True, help_text='Código de activación generado por Addinteli.', max_length=50, null=True, verbose_name='Código Addinteli')),
                ('modo_pago_cliente', models.CharField(choices=[('online', 'Pago en Línea'), ('manual', 'Pago Manual'), ('no_aplica', 'Sin Pago (Distribuidor o Propia Cuenta)')], default='no_aplica', help_text='Método con el que el cliente pagó la activación.', max_length=20, verbose_name='Modo de Pago del Cliente')),
                ('addinteli_response_code', models.CharField(blank=True, help_text='Código de respuesta de la API de Addinteli.', max_length=20, null=True, verbose_name='Código de Respuesta Addinteli')),
                ('mensaje_addinteli', models.TextField(blank=True, help_text='Mensaje devuelto por la API de Addinteli.', null=True, verbose_name='Mensaje Addinteli')),
                ('ip_solicitud', models.GenericIPAddressField(blank=True, help_text='Dirección IP desde donde se generó la activación.', null=True, verbose_name='IP de Solicitud')),
                ('pais_origen', models.CharField(blank=True, help_text='Código ISO 3166-1 alpha-3 del país de origen.', max_length=3, null=True, validators=[django.core.validators.RegexValidator(message='El código de país debe ser un código ISO 3166-1 alpha-3 válido.', regex='^[A-Z]{3}$')], verbose_name='País de Origen')),
                ('pais_destino', models.CharField(blank=True, help_text='Código ISO 3166-1 alpha-3 del país de destino.', max_length=3, null=True, validators=[django.core.validators.RegexValidator(message='El código de país debe ser un código ISO 3166-1 alpha-3 válido.', regex='^[A-Z]{3}$')], verbose_name='País de Destino')),
                ('lote_id', models.CharField(blank=True, db_index=True, help_text='Identificador de lote si esta activación es parte de una operación masiva.', max_length=50, null=True, verbose_name='Lote ID')),
                ('fecha_solicitud', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora en que se creó la solicitud.', verbose_name='Fecha de Solicitud')),
                ('fecha_activacion', models.DateTimeField(blank=True, help_text='Fecha y hora en que se completó la activación.', null=True, verbose_name='Fecha de Activación')),
            ],
            options={
                'verbose_name': 'Activación',
                'verbose_name_plural': 'Activaciones',
            },
        ),
        migrations.CreateModel(
            name='ActivacionErrorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iccid', models.CharField(help_text='ICCID asociado al error.', max_length=22, validators=[django.core.validators.RegexValidator(message='El ICCID debe tener 19-22 dígitos.', regex='^\\d{19,22}$')], verbose_name='ICCID')),
                ('error_tipo', models.CharField(help_text='Tipo de error: conexión API, JSON inválido, etc.', max_length=50, verbose_name='Tipo de Error')),
                ('codigo_error_addinteli', models.CharField(blank=True, help_text='Código de error devuelto por la API de Addinteli.', max_length=20, null=True, verbose_name='Código de Error Addinteli')),
                ('detalle', models.TextField(help_text='Descripción detallada del error o traceback.', verbose_name='Detalle')),
                ('origin_ip', models.GenericIPAddressField(blank=True, help_text='Dirección IP desde donde se originó el error.', null=True, verbose_name='IP de Origen')),
                ('user_agent', models.CharField(blank=True, help_text='Información del agente de usuario que generó el error.', max_length=255, null=True, verbose_name='User Agent')),
                ('fecha', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora del error.', verbose_name='Fecha')),
            ],
            options={
                'verbose_name': 'Log de Error de Activación',
                'verbose_name_plural': 'Logs de Errores de Activación',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='APIWebhookLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evento', models.CharField(help_text='Nombre del evento recibido (e.g., activacion_completada).', max_length=100, verbose_name='Evento')),
                ('payload', models.JSONField(help_text='Datos recibidos en el webhook.', verbose_name='Payload')),
                ('status', models.CharField(choices=[('pendiente', 'Pendiente'), ('procesado', 'Procesado'), ('fallido', 'Fallido')], default='pendiente', help_text='Estado del procesamiento del webhook.', max_length=20, verbose_name='Estado')),
                ('ip_origen', models.GenericIPAddressField(blank=True, help_text='Dirección IP desde donde se recibió el webhook.', null=True, verbose_name='IP de Origen')),
                ('respuesta', models.JSONField(blank=True, help_text='Respuesta enviada al webhook, si aplica.', null=True, verbose_name='Respuesta')),
                ('fecha', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de recepción del webhook.', verbose_name='Fecha')),
            ],
            options={
                'verbose_name': 'Log Webhook API',
                'verbose_name_plural': 'Logs Webhook API',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accion', models.CharField(help_text='Descripción de la acción realizada.', max_length=255, verbose_name='Acción')),
                ('entidad', models.CharField(help_text='Entidad afectada (e.g., Activacion, User).', max_length=255, verbose_name='Entidad')),
                ('entidad_id', models.CharField(blank=True, help_text='Identificador de la entidad afectada.', max_length=255, null=True, verbose_name='ID de Entidad')),
                ('detalles', models.JSONField(blank=True, help_text='Detalles adicionales en formato JSON.', null=True, verbose_name='Detalles')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Dirección IP del cliente que realizó la acción.', null=True, verbose_name='Dirección IP')),
                ('origen_api', models.BooleanField(default=False, help_text='Indica si la acción proviene de una API externa.', verbose_name='Origen API')),
                ('integridad_verificada', models.BooleanField(default=False, help_text='Indica si el hash de auditoría ha sido verificado.', verbose_name='Integridad Verificada')),
                ('fecha', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora del evento.', verbose_name='Fecha')),
                ('audit_hash_stored', models.CharField(blank=True, editable=False, help_text='Hash SHA256 almacenado para verificar integridad del registro.', max_length=64, null=True, verbose_name='Hash de Auditoría Almacenado')),
            ],
            options={
                'verbose_name': 'Registro de Auditoría',
                'verbose_name_plural': 'Registros de Auditoría',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='HistorialActivacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accion', models.CharField(choices=[('create', 'Creación'), ('update', 'Actualización'), ('procesar_activacion', 'Procesamiento de Activación'), ('procesar_activacion_fallida', 'Fallo en Procesamiento')], help_text='Acción ejecutada: creación, actualización, procesamiento, etc.', max_length=100, verbose_name='Acción')),
                ('mensaje', models.TextField(help_text='Descripción del evento o error.', verbose_name='Mensaje')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Detalles adicionales en formato JSON.', verbose_name='Detalles')),
                ('ip_origen', models.GenericIPAddressField(blank=True, help_text='Dirección IP desde donde se generó el evento.', null=True, verbose_name='IP de Origen')),
                ('fecha', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora del evento.', verbose_name='Fecha')),
            ],
            options={
                'verbose_name': 'Historial de Activación',
                'verbose_name_plural': 'Historial de Activaciones',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='PortabilidadDetalle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_actual', models.CharField(help_text='Número telefónico que será portado.', max_length=20, validators=[django.core.validators.RegexValidator(message='El número debe tener 10-15 dígitos, opcionalmente con +.', regex='^\\+?\\d{10,15}$')], verbose_name='Número Actual')),
                ('compañia_origen', models.CharField(blank=True, help_text='Nombre del operador actual del número, opcional.', max_length=50, null=True, verbose_name='Compañía Origen')),
                ('nip_portabilidad', models.CharField(help_text='Código NIP para validar la portabilidad.', max_length=10, validators=[django.core.validators.RegexValidator(message='El NIP debe ser un código de 4 dígitos.', regex='^\\d{4}$')], verbose_name='NIP de Portabilidad')),
                ('curp', models.CharField(blank=True, help_text='CURP del titular, si aplica por regulación.', max_length=18, null=True, validators=[django.core.validators.RegexValidator(message='El CURP debe tener un formato válido.', regex='^[A-Z]{4}\\d{6}[A-Z]{6}[A-Z0-9]{2}$')], verbose_name='CURP')),
                ('fecha_nacimiento', models.DateField(blank=True, help_text='Fecha de nacimiento del titular, opcional según regulación.', null=True, verbose_name='Fecha de Nacimiento')),
                ('tipo_identificacion', models.CharField(blank=True, choices=[('INE', 'INE'), ('PASAPORTE', 'Pasaporte'), ('OTRO', 'Otro')], help_text='Tipo de documento de identificación proporcionado.', max_length=20, null=True, verbose_name='Tipo de Identificación')),
                ('identificacion_url', models.URLField(blank=True, help_text='Enlace al documento de identificación cargado (INE, contrato, etc.).', null=True, verbose_name='URL de Identificación')),
            ],
            options={
                'verbose_name': 'Detalle de Portabilidad',
                'verbose_name_plural': 'Detalles de Portabilidad',
            },
        ),
    ]
