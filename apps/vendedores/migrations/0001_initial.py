# Generated by Django 5.2.1 on 2025-06-22 19:11

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DistribuidorVendedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único universal para la relación.', unique=True, verbose_name='UUID')),
                ('saldo_inicial', models.DecimalField(decimal_places=2, default=0.0, help_text='Monto inicial asignado al vendedor al crear la relación.', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Saldo Inicial')),
                ('saldo_asignado', models.DecimalField(decimal_places=2, default=0.0, help_text='Monto total asignado por el distribuidor, incluyendo adiciones posteriores.', max_digits=15, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Saldo Asignado Total')),
                ('saldo_disponible', models.DecimalField(decimal_places=2, default=0.0, help_text='Monto disponible para operaciones del vendedor.', max_digits=15, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Saldo Disponible Actual')),
                ('moneda', models.CharField(default='MXN', help_text='Código ISO 4217 de la moneda del saldo (e.g., MXN, USD, EUR).', max_length=3, validators=[django.core.validators.RegexValidator(message='La moneda debe ser un código ISO 4217 válido (e.g., MXN, USD, EUR).', regex='^[A-Z]{3}$')], verbose_name='Moneda')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el vendedor está habilitado para operar.', verbose_name='Activo')),
                ('direccion', models.CharField(blank=True, help_text='Dirección principal del vendedor (opcional).', max_length=255, null=True, verbose_name='Dirección')),
                ('direccion_contacto', models.TextField(blank=True, help_text='Dirección física o ubicación de contacto adicional del vendedor (opcional).', verbose_name='Dirección de Contacto')),
                ('telefono_contacto', models.CharField(blank=True, help_text='Número telefónico del vendedor (WhatsApp, celular, fijo, etc., opcional).', max_length=20, validators=[django.core.validators.RegexValidator(message='El número de teléfono debe ser válido (10-15 dígitos, opcionalmente con +).', regex='^\\+?1?\\d{10,15}$')], verbose_name='Teléfono de Contacto')),
                ('correo_contacto', models.EmailField(blank=True, help_text='Correo electrónico adicional de contacto del vendedor (opcional).', max_length=254, verbose_name='Correo de Contacto')),
                ('nombre_comercial', models.CharField(blank=True, help_text='Nombre de marca o empresa bajo la que trabaja el vendedor (opcional).', max_length=100, verbose_name='Nombre Comercial')),
                ('es_creado_directamente', models.BooleanField(default=True, help_text='Indica si este vendedor fue creado directamente por el distribuidor.', verbose_name='Creado por Distribuidor')),
                ('fecha_asignacion', models.DateTimeField(auto_now_add=True, help_text='Fecha en que se creó la relación (sin auditoría).', verbose_name='Fecha de Asignación')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, help_text='Fecha en que se creó la relación (con auditoría).', verbose_name='Fecha de Creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, help_text='Fecha de la última actualización de la relación.', verbose_name='Fecha de Última Actualización')),
                ('fecha_desactivacion', models.DateTimeField(blank=True, help_text='Fecha en que el vendedor fue desactivado, si aplica.', null=True, verbose_name='Fecha de Desactivación')),
                ('configuracion', models.JSONField(blank=True, default=dict, help_text='Configuraciones específicas en formato JSON (e.g., límites personalizados, comisiones).', verbose_name='Configuraciones')),
                ('creado_por', models.ForeignKey(blank=True, help_text='Usuario que creó esta relación.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='relaciones_dist_vend_creadas', to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('distribuidor', models.ForeignKey(help_text='Usuario con rol de distribuidor que gestiona este vendedor.', limit_choices_to={'rol': 'distribuidor'}, on_delete=django.db.models.deletion.CASCADE, related_name='vendedores_asignados_via_relacion', to=settings.AUTH_USER_MODEL, verbose_name='Distribuidor')),
                ('vendedor', models.OneToOneField(help_text='Usuario con rol de vendedor asignado a este distribuidor.', limit_choices_to={'rol': 'vendedor'}, on_delete=django.db.models.deletion.CASCADE, related_name='perfil_distribuidor', to=settings.AUTH_USER_MODEL, verbose_name='Vendedor')),
            ],
            options={
                'verbose_name': 'Relación Distribuidor-Vendedor',
                'verbose_name_plural': 'Relaciones Distribuidor-Vendedor',
            },
        ),
        migrations.CreateModel(
            name='DistribuidorVendedorChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_type', models.CharField(choices=[('create', 'Creación'), ('update', 'Actualización'), ('deactivate', 'Desactivación'), ('reactivate', 'Reactivación')], help_text='Tipo de cambio realizado.', max_length=50, verbose_name='Tipo de cambio')),
                ('change_description', models.TextField(blank=True, help_text='Descripción del cambio realizado.', verbose_name='Descripción')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Detalles específicos del cambio en formato JSON.', verbose_name='Detalles')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='Fecha y hora del cambio.', verbose_name='Fecha')),
                ('changed_by', models.ForeignKey(help_text='Usuario que realizó el cambio.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dist_vend_changes', to=settings.AUTH_USER_MODEL, verbose_name='Modificado por')),
                ('relacion', models.ForeignKey(help_text='Relación distribuidor-vendedor asociada.', on_delete=django.db.models.deletion.CASCADE, related_name='change_logs', to='vendedores.distribuidorvendedor', verbose_name='Relación')),
            ],
            options={
                'verbose_name': 'Registro de Cambio Distribuidor-Vendedor',
                'verbose_name_plural': 'Registros de Cambios Distribuidor-Vendedor',
            },
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedor',
            index=models.Index(fields=['distribuidor', 'vendedor'], name='vendedores__distrib_2e9b1a_idx'),
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedor',
            index=models.Index(fields=['activo'], name='vendedores__activo_93aa0a_idx'),
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedor',
            index=models.Index(fields=['uuid'], name='vendedores__uuid_44a1b6_idx'),
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedor',
            index=models.Index(fields=['fecha_creacion'], name='vendedores__fecha_c_09f58f_idx'),
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedor',
            index=models.Index(fields=['fecha_asignacion'], name='vendedores__fecha_a_6441e9_idx'),
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedor',
            index=models.Index(fields=['es_creado_directamente'], name='vendedores__es_crea_e73833_idx'),
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedor',
            index=models.Index(fields=['moneda'], name='vendedores__moneda_803016_idx'),
        ),
        migrations.AddConstraint(
            model_name='distribuidorvendedor',
            constraint=models.CheckConstraint(condition=models.Q(('saldo_disponible__lte', models.F('saldo_asignado'))), name='saldo_disponible_no_excede_asignado', violation_error_message='El saldo disponible no puede exceder el saldo asignado.'),
        ),
        migrations.AddConstraint(
            model_name='distribuidorvendedor',
            constraint=models.CheckConstraint(condition=models.Q(('saldo_disponible__gte', 0)), name='saldo_disponible_no_negativo', violation_error_message='El saldo disponible no puede ser negativo.'),
        ),
        migrations.AddConstraint(
            model_name='distribuidorvendedor',
            constraint=models.CheckConstraint(condition=models.Q(('saldo_inicial__gte', 0)), name='saldo_inicial_no_negativo', violation_error_message='El saldo inicial no puede ser negativo.'),
        ),
        migrations.AlterUniqueTogether(
            name='distribuidorvendedor',
            unique_together={('distribuidor', 'vendedor')},
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedorchangelog',
            index=models.Index(fields=['relacion', 'timestamp'], name='vendedores__relacio_861089_idx'),
        ),
        migrations.AddIndex(
            model_name='distribuidorvendedorchangelog',
            index=models.Index(fields=['change_type'], name='vendedores__change__91d84c_idx'),
        ),
    ]
