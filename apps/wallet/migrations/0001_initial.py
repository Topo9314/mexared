# Generated by Django 5.2.1 on 2025-06-22 19:11

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Moneda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(default='MXN', max_length=10, unique=True)),
                ('nombre', models.CharField(default='Peso Mexicano', max_length=100)),
                ('activo', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Moneda',
                'verbose_name_plural': 'Monedas',
                'ordering': ['codigo'],
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Saldo disponible para operaciones financieras.', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Saldo disponible')),
                ('blocked_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Fondos retenidos por disputas, auditorías o prevención de fraudes.', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Saldo bloqueado')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Fecha y hora de la última modificación del saldo.', verbose_name='Última actualización')),
                ('hierarchy_root', models.ForeignKey(blank=True, help_text='El administrador o distribuidor padre en la jerarquía.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_wallets', to=settings.AUTH_USER_MODEL, verbose_name='Jerarquía raíz')),
                ('user', models.OneToOneField(help_text='Usuario asociado a esta billetera (único).', on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Billetera',
                'verbose_name_plural': 'Billeteras',
            },
        ),
        migrations.CreateModel(
            name='WalletMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único del movimiento.', primary_key=True, serialize=False, verbose_name='ID de movimiento')),
                ('tipo', models.CharField(choices=[('CREDITO', 'Crédito'), ('DEBITO', 'Débito'), ('AJUSTE_POSITIVO', 'Ajuste Positivo'), ('AJUSTE_NEGATIVO', 'Ajuste Negativo'), ('TRANSFERENCIA_INTERNA', 'Transferencia Interna'), ('BLOQUEO', 'Bloqueo de Fondos'), ('DESBLOQUEO', 'Desbloqueo de Fondos'), ('REEMBOLSO', 'Reembolso'), ('RETIRO', 'Retiro'), ('COMPRA_EXTERNA', 'Compra Externa (MercadoPago)'), ('CARGO_EXTERNO', 'Cargo Externo (API, Addinteli)'), ('BONO_PROMOCIONAL', 'Bono Promocional'), ('AJUSTE_MANUAL', 'Ajuste Manual Admin'), ('CONCILIACION_BANCARIA', 'Conciliación Bancaria')], help_text='Tipo de movimiento (crédito, débito, transferencia, etc.).', max_length=50, verbose_name='Tipo de movimiento')),
                ('monto', models.DecimalField(decimal_places=2, help_text='Monto del movimiento financiero.', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'), message='El monto debe ser al menos %(limit_value)s MXN.'), django.core.validators.MaxValueValidator(Decimal('50000.00'), message='El monto no puede exceder %(limit_value)s MXN.')], verbose_name='Monto')),
                ('referencia', models.CharField(blank=True, help_text='Referencia externa, e.g., ID de transacción MercadoPago o API Addinteli.', max_length=255, null=True, verbose_name='Referencia')),
                ('operacion_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único de la operación para trazabilidad.', verbose_name='ID de operación')),
                ('fecha', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora del movimiento.', verbose_name='Fecha')),
                ('conciliado', models.BooleanField(default=False, help_text='Indica si el movimiento ha sido conciliado con registros financieros.', verbose_name='Conciliado')),
                ('fecha_conciliacion', models.DateTimeField(blank=True, help_text='Fecha en que el movimiento fue conciliado.', null=True, verbose_name='Fecha de conciliación')),
                ('actor_ip', models.GenericIPAddressField(blank=True, help_text='Dirección IP desde donde se realizó la operación.', null=True, verbose_name='IP de origen')),
                ('device_info', models.CharField(blank=True, help_text='Detalles del dispositivo usado (e.g., User-Agent).', max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Información del dispositivo contiene caracteres inválidos.', regex='^[\\w\\s\\-\\(\\):;,.\\/\\\\@#&+=]*$')], verbose_name='Información del dispositivo')),
                ('creado_por', models.ForeignKey(blank=True, help_text='Usuario que ejecutó la operación.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movimientos_creados', to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('origen_wallet', models.ForeignKey(blank=True, help_text='Billetera origen para transferencias.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movimientos_emitidos', to='wallet.wallet', verbose_name='Usuario origen')),
                ('wallet', models.ForeignKey(help_text='Billetera asociada al movimiento.', on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='wallet.wallet', verbose_name='Usuario destino')),
            ],
            options={
                'verbose_name': 'Movimiento de billetera',
                'verbose_name_plural': 'Movimientos de billetera',
                'ordering': ['-fecha'],
            },
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['user'], name='wallet_wall_user_id_03e396_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['hierarchy_root'], name='wallet_wall_hierarc_b3da51_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['balance'], name='wallet_wall_balance_1ea64d_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['blocked_balance'], name='wallet_wall_blocked_4846cb_idx'),
        ),
        migrations.AddConstraint(
            model_name='wallet',
            constraint=models.CheckConstraint(condition=models.Q(('balance__gte', 0)), name='non_negative_balance', violation_error_message='El saldo disponible no puede ser negativo.'),
        ),
        migrations.AddConstraint(
            model_name='wallet',
            constraint=models.CheckConstraint(condition=models.Q(('blocked_balance__gte', 0)), name='non_negative_blocked_balance', violation_error_message='El saldo bloqueado no puede ser negativo.'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['wallet', 'fecha'], name='wallet_wall_wallet__57b3f5_idx'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['tipo'], name='wallet_wall_tipo_24ebea_idx'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['operacion_id'], name='wallet_wall_operaci_d1be18_idx'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['conciliado'], name='wallet_wall_concili_418af1_idx'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['monto'], name='wallet_wall_monto_c6e05a_idx'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['fecha_conciliacion'], name='wallet_wall_fecha_c_5d1253_idx'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['creado_por'], name='wallet_wall_creado__872069_idx'),
        ),
        migrations.AddIndex(
            model_name='walletmovement',
            index=models.Index(fields=['origen_wallet'], name='wallet_wall_origen__24bd57_idx'),
        ),
        migrations.AddConstraint(
            model_name='walletmovement',
            constraint=models.CheckConstraint(condition=models.Q(('monto__gte', Decimal('0.01')), ('monto__lte', Decimal('50000.00'))), name='valid_monto_range', violation_error_message='El monto debe estar entre 0.01 y 50000.00 MXN.'),
        ),
    ]
